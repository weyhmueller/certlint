package main

import (
	"fmt"

	"github.com/weyhmueller/certlint/asn1"
	"github.com/weyhmueller/certlint/certdata"
	"github.com/weyhmueller/certlint/checks"
	"github.com/weyhmueller/certlint/errors"

	// Check for certificate (ext) KeyUsage extension
	_ "github.com/weyhmueller/certlint/checks/extensions/extkeyusage"
	_ "github.com/weyhmueller/certlint/checks/extensions/keyusage"

	// Also check the parsed certificate (ext) keyusage content
	_ "github.com/weyhmueller/certlint/checks/certificate/extkeyusage"
	_ "github.com/weyhmueller/certlint/checks/certificate/keyusage"
)

func main() {
	var e = errors.New(nil)

	// Certificate with no keyusage
	der := []byte{0x30, 0x82, 0x5, 0x9, 0x30, 0x82, 0x3, 0xf1, 0xa0, 0x3, 0x2,
		0x1, 0x2, 0x2, 0xc, 0x58, 0x66, 0xb4, 0xcf, 0x2, 0x14, 0xdc, 0x22, 0x49, 0xc3,
		0x8e, 0x61, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1,
		0xb, 0x5, 0x0, 0x30, 0x66, 0x31, 0xb, 0x30, 0x9, 0x6, 0x3, 0x55, 0x4, 0x6,
		0x13, 0x2, 0x42, 0x45, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13,
		0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x20, 0x6e,
		0x76, 0x2d, 0x73, 0x61, 0x31, 0x3c, 0x30, 0x3a, 0x6, 0x3, 0x55, 0x4, 0x3,
		0x13, 0x33, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x20,
		0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
		0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41,
		0x20, 0x2d, 0x20, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x20, 0x2d, 0x20, 0x47,
		0x32, 0x30, 0x1e, 0x17, 0xd, 0x31, 0x36, 0x30, 0x39, 0x31, 0x35, 0x30, 0x39,
		0x32, 0x37, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x31, 0x39, 0x30, 0x38, 0x32, 0x37,
		0x31, 0x32, 0x31, 0x38, 0x31, 0x32, 0x5a, 0x30, 0x5d, 0x31, 0xb, 0x30, 0x9,
		0x6, 0x3, 0x55, 0x4, 0x6, 0x13, 0x2, 0x4e, 0x4f, 0x31, 0xd, 0x30, 0xb, 0x6,
		0x3, 0x55, 0x4, 0x8, 0x13, 0x4, 0x4f, 0x73, 0x6c, 0x6f, 0x31, 0xd, 0x30, 0xb,
		0x6, 0x3, 0x55, 0x4, 0x7, 0x13, 0x4, 0x4f, 0x73, 0x6c, 0x6f, 0x31, 0x18, 0x30,
		0x16, 0x6, 0x3, 0x55, 0x4, 0xa, 0x13, 0xf, 0x49, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
		0x20, 0x4e, 0x6f, 0x72, 0x67, 0x65, 0x20, 0x41, 0x53, 0x31, 0x16, 0x30, 0x14,
		0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0xd, 0x6e, 0x65, 0x77, 0x2e, 0x69, 0x6d, 0x65,
		0x6e, 0x74, 0x6f, 0x2e, 0x6e, 0x6f, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6,
		0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82,
		0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xca, 0xe1,
		0x9, 0xdb, 0xa1, 0x83, 0xe4, 0xa2, 0x1f, 0xeb, 0xfa, 0xd2, 0xa4, 0x1d, 0x46,
		0x95, 0x91, 0xc2, 0x57, 0xa8, 0xe9, 0x7e, 0xaa, 0x7f, 0xfe, 0xba, 0xa7, 0x71,
		0xfe, 0xbd, 0xee, 0xdf, 0xce, 0x41, 0x50, 0xa0, 0x64, 0xab, 0xcc, 0x6c, 0x5d,
		0x38, 0x79, 0xfd, 0x42, 0x88, 0x97, 0xa4, 0xf7, 0xf4, 0x33, 0x55, 0x2, 0x57,
		0xee, 0x11, 0x7b, 0x5b, 0x10, 0x4a, 0x43, 0x8c, 0x21, 0xe1, 0xee, 0x44, 0xdd,
		0xc5, 0x52, 0xe1, 0xae, 0x43, 0xe0, 0xea, 0xea, 0xd6, 0x29, 0xdb, 0x10, 0xb6,
		0xd8, 0x95, 0x7c, 0xd, 0xbd, 0xf9, 0xc5, 0xca, 0x5e, 0xc0, 0x7f, 0x39, 0x8e,
		0x5, 0x1a, 0xe9, 0xdf, 0x29, 0x58, 0xbe, 0xbe, 0xb6, 0xa6, 0x8a, 0x4, 0xfa,
		0xfa, 0x8f, 0x5e, 0x13, 0x12, 0xe2, 0xb8, 0x4a, 0x1d, 0xe1, 0x9a, 0xc3, 0xe,
		0xd0, 0x4c, 0x81, 0x3b, 0xfb, 0xf9, 0xeb, 0xfa, 0xff, 0xd, 0x61, 0x5f, 0x2a,
		0xee, 0xc4, 0x9f, 0xce, 0x82, 0x20, 0x86, 0xa8, 0xaf, 0xe5, 0xe8, 0x84, 0xe1,
		0x61, 0x3b, 0x58, 0xf6, 0xae, 0xc8, 0x8d, 0x19, 0xc3, 0x2a, 0x13, 0x5a, 0x9c,
		0x5f, 0xe5, 0x1a, 0x5, 0xfa, 0x53, 0xeb, 0x4f, 0x86, 0xd9, 0x3b, 0xa0, 0x8a,
		0xa, 0x48, 0x68, 0x96, 0xba, 0x95, 0x14, 0x4e, 0xbf, 0xaf, 0x5e, 0xc5, 0x42,
		0x21, 0x5e, 0xc7, 0x3f, 0x4b, 0x20, 0x7d, 0x26, 0x79, 0xe, 0x41, 0xd1, 0xa8,
		0xea, 0x16, 0x6e, 0x2b, 0x73, 0xc6, 0x50, 0x20, 0xf0, 0xba, 0xcc, 0x6a, 0x7c,
		0x5f, 0xd7, 0x45, 0x8f, 0x25, 0x5d, 0x63, 0xfd, 0xf0, 0x2a, 0x73, 0xe6, 0x4e,
		0xe2, 0xce, 0x70, 0x37, 0x3b, 0x18, 0xf3, 0x93, 0x61, 0x7b, 0x1c, 0xd7, 0x3f,
		0xcc, 0x73, 0x82, 0xfe, 0xd0, 0x1b, 0xfa, 0x12, 0x49, 0xa6, 0x5b, 0xa0, 0x3b,
		0xa6, 0x1, 0xa1, 0x60, 0x42, 0x6c, 0x71, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x82,
		0x1, 0xbe, 0x30, 0x82, 0x1, 0xba, 0x30, 0x81, 0xa0, 0x6, 0x8, 0x2b, 0x6, 0x1,
		0x5, 0x5, 0x7, 0x1, 0x1, 0x4, 0x81, 0x93, 0x30, 0x81, 0x90, 0x30, 0x4d, 0x6,
		0x8, 0x2b, 0x6, 0x1, 0x5, 0x5, 0x7, 0x30, 0x2, 0x86, 0x41, 0x68, 0x74, 0x74,
		0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x67, 0x6c,
		0x6f, 0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
		0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x67, 0x73, 0x6f, 0x72, 0x67, 0x61,
		0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x73, 0x68,
		0x61, 0x32, 0x67, 0x32, 0x72, 0x31, 0x2e, 0x63, 0x72, 0x74, 0x30, 0x3f, 0x6,
		0x8, 0x2b, 0x6, 0x1, 0x5, 0x5, 0x7, 0x30, 0x1, 0x86, 0x33, 0x68, 0x74, 0x74,
		0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x32, 0x2e, 0x67, 0x6c, 0x6f,
		0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
		0x73, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
		0x76, 0x61, 0x6c, 0x73, 0x68, 0x61, 0x32, 0x67, 0x32, 0x30, 0x56, 0x6, 0x3,
		0x55, 0x1d, 0x20, 0x4, 0x4f, 0x30, 0x4d, 0x30, 0x41, 0x6, 0x9, 0x2b, 0x6, 0x1,
		0x4, 0x1, 0xa0, 0x32, 0x1, 0x14, 0x30, 0x34, 0x30, 0x32, 0x6, 0x8, 0x2b, 0x6,
		0x1, 0x5, 0x5, 0x7, 0x2, 0x1, 0x16, 0x26, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
		0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
		0x69, 0x67, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
		0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x30, 0x8, 0x6, 0x6, 0x67, 0x81, 0xc, 0x1,
		0x2, 0x2, 0x30, 0x9, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x4, 0x2, 0x30, 0x0, 0x30,
		0x49, 0x6, 0x3, 0x55, 0x1d, 0x1f, 0x4, 0x42, 0x30, 0x40, 0x30, 0x3e, 0xa0,
		0x3c, 0xa0, 0x3a, 0x86, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63,
		0x72, 0x6c, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e,
		0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x73, 0x2f, 0x67, 0x73, 0x6f, 0x72, 0x67,
		0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x61, 0x6c, 0x73,
		0x68, 0x61, 0x32, 0x67, 0x32, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x27, 0x6, 0x3,
		0x55, 0x1d, 0x11, 0x4, 0x20, 0x30, 0x1e, 0x82, 0xd, 0x6e, 0x65, 0x77, 0x2e,
		0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2e, 0x6e, 0x6f, 0x82, 0xd, 0x77, 0x77,
		0x77, 0x2e, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2e, 0x6e, 0x6f, 0x30, 0x1d,
		0x6, 0x3, 0x55, 0x1d, 0xe, 0x4, 0x16, 0x4, 0x14, 0x3e, 0xf4, 0xeb, 0x13, 0x6e,
		0x4c, 0xfd, 0xeb, 0x55, 0x5f, 0xf7, 0x6d, 0x3e, 0x81, 0x8d, 0x43, 0x75, 0x58,
		0x17, 0x4a, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16,
		0x80, 0x14, 0x96, 0xde, 0x61, 0xf1, 0xbd, 0x1c, 0x16, 0x29, 0x53, 0x1c, 0xc0,
		0xcc, 0x7d, 0x3b, 0x83, 0x0, 0x40, 0xe6, 0x1a, 0x7c, 0x30, 0xd, 0x6, 0x9,
		0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1,
		0x1, 0x0, 0x8e, 0xe9, 0x83, 0xf7, 0x45, 0x22, 0x22, 0xd5, 0xaf, 0x7a, 0x90,
		0x7, 0xb9, 0x3a, 0xff, 0xba, 0x4f, 0xe3, 0x77, 0x6d, 0x85, 0xbb, 0xb6, 0xd2,
		0xdc, 0x70, 0x6a, 0x5d, 0xea, 0x64, 0x19, 0x70, 0x50, 0x75, 0xd6, 0x83, 0x9c,
		0x2, 0xf5, 0x4c, 0x61, 0xd5, 0xd3, 0xd9, 0xd5, 0x4c, 0xdc, 0x8c, 0x36, 0xcc,
		0x7b, 0x95, 0xe0, 0x16, 0xeb, 0x61, 0x55, 0x7, 0xaa, 0x0, 0x8b, 0xfb, 0x4d,
		0xba, 0x94, 0xa3, 0x27, 0x5c, 0x1d, 0xaf, 0xad, 0xcb, 0xea, 0x29, 0xfc, 0x5c,
		0x36, 0x97, 0x8b, 0xbf, 0x6e, 0x7a, 0xdf, 0x84, 0x7d, 0x87, 0xcc, 0xf8, 0x92,
		0x82, 0x6c, 0xf6, 0x1c, 0x19, 0xa4, 0xcf, 0xec, 0xd, 0xa0, 0xab, 0x40, 0x98,
		0x41, 0xa6, 0xf8, 0x1, 0xe5, 0x67, 0xd7, 0x95, 0x8d, 0x6e, 0x1f, 0xe9, 0xa2,
		0x70, 0xd6, 0xe8, 0x9a, 0x44, 0x12, 0x43, 0xed, 0x3, 0x66, 0xa3, 0xd2, 0x11,
		0xe7, 0x37, 0x67, 0x14, 0xbf, 0x86, 0x3d, 0x53, 0x62, 0x9f, 0xc1, 0xac, 0x65,
		0x12, 0xc1, 0x26, 0x15, 0x3a, 0xea, 0x6c, 0xe5, 0x85, 0x63, 0x8c, 0xf1, 0xbf,
		0xdb, 0x2c, 0x8, 0x1b, 0x41, 0xca, 0x3c, 0xdd, 0xab, 0x49, 0xe4, 0xc1, 0x92,
		0xe7, 0x41, 0x1, 0xe4, 0x85, 0xff, 0xec, 0xde, 0x45, 0x73, 0xa, 0xfe, 0x91,
		0xc7, 0x77, 0x5b, 0x6e, 0x4f, 0x36, 0x43, 0x5a, 0x80, 0x2f, 0xd9, 0xb3, 0xd0,
		0x42, 0xf1, 0x7a, 0x63, 0x74, 0xe4, 0x77, 0x23, 0x37, 0x8c, 0x4d, 0x1d, 0x3d,
		0x67, 0x6a, 0xb5, 0x1d, 0x1d, 0xcb, 0xb1, 0x74, 0xfb, 0x12, 0x92, 0xd5, 0x88,
		0x4, 0x5c, 0xbe, 0x99, 0xd7, 0xb8, 0x53, 0xbf, 0x5c, 0x5e, 0x8e, 0xcf, 0x3,
		0x78, 0x2e, 0xe2, 0x4e, 0xf0, 0xb2, 0xf, 0x11, 0x72, 0x1f, 0x16, 0x1c, 0xde,
		0xa7, 0x6c, 0x27, 0xc5, 0x9, 0xe0, 0x65, 0x3, 0x5f, 0xca, 0xc1}

	// Check the ASN1 structure for common formatting errros
	al := new(asn1.Linter)
	e.Append(al.CheckStruct(der))

	// Load and parse certificate
	d, err := certdata.Load(der)
	if err == nil {
		// Perform all and only the imported checks
		e.Append(checks.Certificate.Check(d))
	}

	// List all errors
	for _, err := range e.List() {
		fmt.Printf("%s (%s)\n", err.Error(), d.Type)
	}
}
